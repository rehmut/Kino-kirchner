generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  GUEST
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  MAYBE
}

enum FeatureRequestStatus {
  PENDING
  APPROVED
  REJECTED
  ARCHIVED
}

model User {
  id              String            @id @default(cuid())
  name            String?
  email           String?           @unique
  emailVerified   DateTime?
  image           String?
  role            Role              @default(GUEST)
  invitations     Invitation[]
  sessions        Session[]
  accounts        Account[]
  featureRequests FeatureRequest[]  @relation("FeatureRequestSubmittedBy")
  createdEvents   Event[]           @relation("EventCreatedBy")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Account {
  id                   Int       @id @default(autoincrement())
  userId               String
  type                 String
  provider             String
  providerAccountId    String
  refresh_token        String?   @map("refresh_token")
  access_token         String?   @map("access_token")
  expires_at           Int?      @map("expires_at")
  token_type           String?   @map("token_type")
  scope                String?
  id_token             String?   @map("id_token")
  session_state        String?   @map("session_state")
  oauth_token_secret   String?   @map("oauth_token_secret")
  oauth_token          String?   @map("oauth_token")
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id              String            @id @default(cuid())
  slug            String            @unique
  title           String
  description     String?
  scheduledAt     DateTime
  doorTime        DateTime?
  location        String?
  heroImage       String?
  isPublished     Boolean           @default(false)
  isArchived      Boolean           @default(false)
  createdById     String
  createdBy       User              @relation("EventCreatedBy", fields: [createdById], references: [id])
  invitations     Invitation[]
  eventFilms      EventFilm[]
  featureRequests FeatureRequest[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([scheduledAt])
  @@index([isPublished, scheduledAt])
}

model Film {
  id              String           @id @default(cuid())
  title           String
  letterboxdUrl   String           @unique
  synopsis        String?
  runtimeMinutes  Int?
  releaseYear     Int?
  posterImage     String?
  director        String?
  eventFilms      EventFilm[]
  featureRequests FeatureRequest[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model EventFilm {
  id        String   @id @default(cuid())
  eventId   String
  filmId    String
  slotOrder Int      @default(0)
  note      String?
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  film      Film     @relation(fields: [filmId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([eventId, filmId])
  @@index([eventId, slotOrder])
}

model Invitation {
  id          String           @id @default(cuid())
  eventId     String
  userId      String?
  inviteeName String?
  email       String
  status      InvitationStatus @default(PENDING)
  rsvpAt      DateTime?
  note        String?
  token       String           @unique
  plusOnes    Int              @default(0)
  event       Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user        User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@unique([eventId, email])
  @@index([eventId, status])
}

model FeatureRequest {
  id             String               @id @default(cuid())
  eventId        String?
  filmId         String?
  submittedById  String?
  submittedEmail String
  submitterName  String?
  filmTitle      String
  letterboxdUrl  String?
  notes          String?
  status         FeatureRequestStatus @default(PENDING)
  event          Event?               @relation(fields: [eventId], references: [id], onDelete: SetNull)
  film           Film?                @relation(fields: [filmId], references: [id], onDelete: SetNull)
  submittedBy    User?                @relation("FeatureRequestSubmittedBy", fields: [submittedById], references: [id], onDelete: SetNull)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt

  @@index([status])
  @@index([letterboxdUrl])
}
